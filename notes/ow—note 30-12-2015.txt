# Embodying git

## git-add

I won’t move on to `git-clone` (for now), and instead will work on `git-add`.

> This command updates the index using the current content found in the working tree, to prepare the content staged for the next commit. It typically adds the current content of existing paths as a whole, but with some options it can also be used to add content with only part of the changes made to the working tree files applied, or remove paths that do not exist in the working tree anymore.

> The "index" holds a snapshot of the content of the working tree, and it is this snapshot that is taken as the contents of the next commit. Thus after making any changes to the working directory, and before running the commit command, you must use the `add` command to add any new or modified files to the index.

> This command can be performed multiple times before a commit. It only adds the content of the specified file(s) at the time the add command is run; if you want subsequent changes included in the next commit, then you must run `git add` again to add the new content to the index.

> The `git status` command can be used to obtain a summary of which files have changes that are staged for the next commit.

> The `git add` command will not add ignored files by default. If any ignored files were explicitly specified on the command line, `git add` will fail with a list of ignored files. Ignored files reached by directory recursion or filename globbing performed by Git (quote your globs before the shell) will be silently ignored. The *git add* command can be used to add ignored files with the `-f (force) option.    
(⤷ [source](https://git-scm.com/docs/git-add))

First of all (if that’s even possible), is that `git-add` starts tracking a folder or a set of files. After the first `git-add`, the command is used to add new files to the repo to be staged and processed. New as in, files that have been changed/modified/edited (merged, and so forth).

After you put under tracking a folder or a bunch of files, you can decide to ignore or exclude some of them, either for that specific commit or for the rest of the project.

Some images:
* drawing the outline of a hand with a marker
* following the outline of a naked body with the two index fingers
* cutting in half a cactus
* opening a fava bean up
* massaging a bundle (?) of grass

* * *

## git-status

> (1) Displays paths that have differences between the index file and the current HEAD commit, (2) paths that have differences between the working tree and the index file, (3) and paths in the working tree that are not tracked by Git (and are not ignored by gitignore). The first are what you *would* commit by running `git commit`; the second and third are what you *could* commit by running *git add* before running `git commit`.  
(⤷ [source](http://www.git-scm.com/docs/git-status))

How are things going? What’s different from before compared to the HEAD commit?

Repetition as difference ☹