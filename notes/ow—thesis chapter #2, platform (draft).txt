# ow—thesis chapter #2, platform

(or platform’s politics?)

* why github.com?
* terms and conditions
* git’s decentralised structure and github’s centralised one
* the potential of the readme file (ethics)
* intellectual property

* * *

In the construction of the user, platforms assume the role of making and giving space to them, and also to influence and shaping each of them.

github.com, as it happened with many other social platforms, is now hosting not only the project of programmers and software developers, but is used by big companies, like google, to share their open-source softwares.

In the same vein, this movement of expansion has attracted writers and designers, for one, over to the github’s platform, enriching a user population once primarily inhabited by people using `git` for work.

* * *

github.com is a curious platform because it acts as a possible shift in the understanding of labour.

Drawing from the free-software and open-source ethos and ethics, for which circulation, non-copyrights, collaboration and remixing of code are the funding values of how to approach work and how to do work, github.com implemented one of the most used tools to put in practice this kind of approach, `git`, at a world-wide level.

While github the company is born to be sustainable and making profits, selling for this reasons private repositories and custom integrations with one’s own private servers, at the same time they are spreading a particular set of ideas all over the commercial internet, some of which are very useful in producing a cultural shift on many areas of what labour means.

With labour on the internet often happening as a non-deliberate act (think of the CAPTCHAs [^1]), github creates a space where work is shared, complementary, remixed, discussed and improved.

[^1]: A CAPTCHA is a task that asks a user to prove he she is a human being, by typing a short combination of letters and numbers read by the user from a provided image. This typing is being used by many companies to scan and digitalise paper books more accurately than a robot could now—for now).

In relation to a possible future scenario defined by a post-work society, platforms like this could be used as a rough blueprint to organise labour in a way, perhaps, more suitable for certain kind of production executed for reasons other than earning a wage. Value will be produced and identified anyway, but will differ from money.

Though they are the first ones not following what they offer, as described below in regard to github’s copyrights over its own software, at a practical level a github user has to adapt his her workflow in relation to an environment born from a programming background. Most people joining github.com are part or move around this circle of production, still, such aspect is essential in drawing a line between labour, internet, and its users.

As computation replaces (or doubles) and transforms more and more parts of human life, data becomes the common material produced out of these processes. Far from suggesting that data takes the place of everything that build the world we live in, disembodying bodies of different kinds and abolishing materiality, I am more concerned and curious to explore how it affects the body and how we can read it and use it to readjust our understanding of what constitutes, in this case, work.

If used *en-masse*, github would be able to familiarise its users to many of the mechanisms taking place on many levels of what’s constitute a human life in the twenty-first century.

For example, data tracking, processing, reading, extracting and its usages is part of what defines the transformation between individuals to dividuals. Becoming numbers instead of retaining one’s personality might have seemed the only outcome characterising the new society of information, twenty five years ago.

But what if we embrace this for real and try to understand what are the processes put in place when tracking someone? How does computation look like when it becomes part of one’s existence, especially when most activities performed are turned into data-tracking and value extraction?

* * *

(terms and conditions)

To create an account on github.com, the requisites are: 1) to be at least of a teenager age (13 yo) and human, 2) providing a name and email address, 3) using one account per user, unless it’s for a machine user—in that case it can be hooked up by as many human users as needed, and 4) taking care of one’s password and uploaded content. As a bonus, a human user has the option to create one machine user account.

On github machine users are acknowledged and given some options. To avoid spam or hacking, and in a way also to implement a norm of human self-responsibility, these accounts cannot be automated in their creation. They have to be set up by other human users. A bot can’t create a bot account on github.com.

The main reason for wanting to use a special machine user account, is to automate tasks when working with more repositories at the same time: speeding up processes, updating a range of submodules at the same time [^2], etc.

[^2]: A submodule is a repository (a project folder) linked to another repository, as if it was a sub-folder of the latter.

In the overall exploration of what it means to move towards a posthuman society, where the human is not replaced by better, more advanced, or different entities, but rather realises his blindness in putting at the centre of the world the anthropos as the supreme being, github’s acknowledgment of machine users looks emblematic.

Emblematic because it reinforces github’s tagline that its platform is ‘How people build software’, while at the same time assigning proper user’s agency only to human users. Rather than a question of enslavement and or submission, which sounds almost arrogant in its embedding of souls to machine users (cfr. animism), the point is how to find a common ground between human users and machine ones.

For this, I don’t yet see problematic github’s need for human authentication when creating a new machine user, because the platform is born to organise and shared human labour first of all. But slowly, it could be used to actively promote a gradual transition toward a common language of data and its computation between human and machine users.

The rising of bots to help human beings with mundane, boring, repetitive, or very complex computational tasks is telling in the measure each of its human creators use them for.

On a more basic level, many of this bots are often dummy and troll experiments, set up for example, to make a user’s followers growing, or spamming all repositories containing a particular component in their architecture.

In this case, human user’s agency still prevails all over. But as it happens on Twitter since a while, where bots of different scopes are populating the platform and enriching the streams of many human users who follow them—from literary experiment, to snarky cut-up tweets, to any other variation in topic and form—which shape could this take on github?

A shift in the current situation, would imply a recalibration of usership. To be very brutal, we could see all technological infrastructures as using human users not as agents, but as component of larger mechanisms. Usership is defined both by using as well as by being used. Being operative is exactly that: transmitting something, receiving something else. In these two actions, informing and deforming the material being passed on.

Github.com is born as a way to spread, facilitate and automate this operativity. Setting up rules where human users are the gatekeepers of the platform, makes sense in a culture still very much imbued with humanist values: it is, nonetheless, a process to get closer with users of other natures. To give “only” human users permission to add them, encounter them and being in relation to them is maybe the way to go in this initial phase. Not making this a reason to let human users tame machine users, but, effectively, the other way around.

Part of github’s architecture, consists of specific features added as extensions of `git`’s existing structure.

The two most used and quintessential features of the platform are *Issues* and *Pull Requests*.

*Issues* gives users the possibility to report problems of any kind that they have encountered in the usage of a particular project repository.

It serves as the help & assistance centre of a project, with the benefit than anyone who wants to help or have an answer to what is posted, can participate. The creator of the repository is not the only one in charge and or in power of that position.

The other useful area, parallel to the Issues section, is *Pull Requests*.

Whereas in Issues a user would, and should only post, problems, in Pull Request users can suggest new features and improvements for the project. It’s not that uncommon for a reported bug or missing feature, to transition from Issues to Pull Requests and being transformed into a feature request. At its best, this structure lets swing from the two sites of discussion very smoothly, improving either what exists, or pushing for new expansions.

Being these the two areas of conversation and exchange, one think of how to avoid bureaucratisation on the platform. There are tons of software that sits on top of github.com to better organise, filter, assign, label, and resolve issues on github.

Similarly, the amounts of ad-hoc solutions, fragmentation of the apparatus into smaller tasks, and cyclical proposals coming from github users, suggests how the Issues tool has become essential within the platform and, exactly because of this, in need of many face-liftings—if not of a structural rethinking.

The implementation of a quick-access option to the emojis keyboard, when typing `:` + any letter or number, lets users dealing with Issues and or Pull Requests with ease, showing their approval or disregard of a particular opinion, or new implemented feature, with a couple of strokes.

With an open ended amount of users possibly interacting on many popular open-source projects, the level of time wasted by the maintainers of these repositories just to check a new notification—reporting yet another user adding ‘+1/👍/me too’—grows huger and huger.

Since this way to show support is quite widespread, a group of github users proposed to implement a proper voting system, able to transform the above reactions into +1 or -1.

These users, tired of how the platform functions, and having to manage big open-source projects hosted on it, published an open letter, directed to Github Inc, in the form of a new repository project. [^3]

[^3]: Here the submission—[Dear Github](https://github.com/dear-github/dear-github).

In it, they suggest how they would like the Issues tool to work, reaching a peak when they surf over the fact that, if github.com would be open-source, they would be more than happy to help with the implementation of what they have been asking. So many nervous grins flirting with a company who, in less then ten years, now hosts the majority of the open source projects on the commercial internet.

On their side, Github Inc. replied saying they not only are listening to their requests (finally given a reply to their emails after two years of silence), but are also working on some extra features to rethinking the Issues section of the platform.

That’s how you do it. Implement more and better!

* * *

(git’s decentralised structure and github’s centralised one)

github.com works as an interface of `git`, making the activity of working together on the same project, and sharing new code, easier.

Even though it is possible to set up one’s own server with `git` installed on it, and create a web interface to facilitate the exchange and collaboration of projects, what github.com offers is, as many other internet services and social platforms, the possibility to focus on what you want to do and not investing time in the underlaying infrastructure governing those very activities.

Perversely, github.com has become the most recognised and main used website for sharing `git`-based workflows, as well as the biggest website hosting open-source projects. The perversion lies in the fact that in becoming this, it is going against the very principles and architecture employed and suggested by `git` in the first case, while finding itself in a bizarre position in the second instance.

The two main factors that put Github Inc. in the above position are:
1. centralisation of the decentralised-by-design git’s infrastructure
2. copyrights over github.com’s software

In its inception, and to put it cynically, `git` is decentralised because its creator, Linus Torvald, was in need to get patches from the various developers helping him with the development of Linux. Originally, `git` was built because the Linux project had some troubles with BitKeeper—a popular Version Control System—after Andrew Tridgell, a computer programmer interested in analysing complex proprietary protocols and algorithms to implement free software version of them, tried to build a free version of it (BitKeeper is proprietary software). Torvald then, was in need of a replacement, and decided to create a free and better implementation of it to use for his needs.

Version Control Systems are divided in those implementing a centralised architecture, and those adopting a decentralised and distributed one. In the former case, users have to work with the same copies of the files on the same server. If the server has problems, users working with it will automatically suffer as well. `git` instead, is a distributed system, where each user has its own copy of the same project, and for this, is also a decentralised one, as users are spread all over the network.

Distributed networks and multiplicities of Linux enthusiasts were perfect for Torvald: more contributions, more choices to pick from or to discard.

The problem with github.com copyrighting the software that makes it run is that, unlike any other repository hosted on its platform, github’s own project repository can’t be duplicated and used. And improved, modified—and so forth.

Besides this being at odd with the fundamentals of `git`, it makes it very hard to create a relay effect, for which when github.com is having some issues, another “copy” of it takes over and keeps the service up and running. Of course for this to happen, many github users should invest a small amount of money in duplicating on their personal servers a perfect copy of the platform’s softwares. Ideally then, if we would stretch this current limitation (github.com’s biggest limitation?), there would be an easy option, in the configuration panel of each user account, through which set up a copy of github by only following some easy steps (or even in a 1-click fashion, a la Amazon and iTunes Store buying method).

* * *

This is all happening also on github, with the exception that in this case the platform wants to be the main place for this kind of activities. But why replacing the internet? Sure, that’s also happening with facebook, which for many people has become “the internet”—the only place to check for news, messages, etc. Same with gmail. The problem is that if any of these big overarching platforms are momentarily having problems (servers are down, a function doesn’t work, and so on), the repercussion are of a world-wide scale impact.